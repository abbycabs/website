[%#
####################################################
#
#  Widgets, Fields, Subfields
#
####################################################
%]

[% MACRO evidence(data, id, text, label) BLOCK %]
  [% IF data %]
  <div class="evidence [% IF text %] result[% END %]">
    [% IF text.label.defined %]
	[% tag2link(text) %]
    [% ELSE %]
	[% markup("$text"); %]
    [% END %]
    [% id = id || 0; %]
[% IF text %]    <div id="evidence_[% id %]" class="ev ui-helper-hidden" > [% END %]
    [% FOREACH type IN data.keys -%] 
        <b>[% type.replace('_',' ') %]</b>:
        [% tags2link(data.$type, '; ') %]  
        [% UNLESS loop.last %]<br>[% END %]
    [% END %]
[% IF text %]    </div>
    <div class="ev-more">
      <div class="v ev-more-line"></div>
      <div class="ev-more-text"><span>[% label ? label : 'evidence' %]</span></div>
      <div class="v ui-icon ui-icon-triangle-1-s"></div>
    </div>
[% END %]
  </div>
  [% ELSE %]
    [% IF text.label.defined %]
	[% tag2link(text) %]
    [% ELSE %]
	[% markup(text) %]
    [% END %]
  [% END %]
[% END %]

[% MACRO user_login_info BLOCK %]
    [% UNLESS c.user_exists %]  
          <div style="padding:0.5em">
            You must <h3 style="display:inline"><a class='lightbox' href="[% c.uri_for('/login').path %]" >Login</a></h3> to use this feature
          </div>
        [% lighbox_js %]
    [% END %]

[% END %]

[% MACRO lighbox_js BLOCK %]
           <script>
window.onload = getBox;
function getBox(){
  WB.getPlugin("colorbox", function(){
    $jq(".lightbox").colorbox();
  });
}

getBox();
          </script>

[% END %]



[% BLOCK toggle %]
    <div class="toggle [% IF lazy; 'load-toggle'; END; %]" 
         [% IF href; ' href="' _ href _ '"'; END; %]
         [% IF id; ' id="' _ id _ '"'; END; %]>
      <span style="float:left" class="ui-icon ui-icon-triangle-1-[% open ? 's' : 'e' %]"></span>
      [% title %]
    </div>
    <div class="returned [% toggle_class %]" [% IF open; 'style="display:block"'; END;%]>
        [% content %]
    </div>
[% END %]



[% MACRO linkUser(user) BLOCK;
    IF (user.wbid && user.wb_link_confirm);
       text2link('person', user.wbid, user.username);
    ELSIF user.username;
       user.username;
    ELSE;
      '<span id="fade"><i>[user deleted]</i></span>';
    END;
  END;
%]



[% MACRO extended_social_links BLOCK;
      IF c.user.open_ids;
         FOREACH id IN c.user.open_ids;	 
	    IF id.provider == 'twitter';
              '&nbsp;&nbsp;<a href="http://twitter.com/' _ id.screen_name
                                    _ '" class="twitter-follow-button" data-show-count="true">Follow @' 
	     			    _ id.screen_name
				    _ '</a>'
				    _ '<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>';
             END;
         END;
      END;
END;
%]


[% MACRO linkPage(page) BLOCK %]
    [% label = page.title %]
    [% UNLESS label; label = page.url; END; %]
    [% IF page.is_obj %]
      [% array=page.url.split('/') %]
      [% text2link(array.slice(-2,-2).0, array.last, label, label, array.slice(-3,-3).0) %]
    [% ELSE %]
      <a href="[% page.url %]">[% label %]</a>
    [% END %]
[% END %]


 
[% MACRO issue_table(issues, issue_type) BLOCK %]
[% IF issues %]
  [% USE time_dir = Time.Duration %]

<!-- Eventually provide a filter of results 
  <p>
  <h4>Filter (not wired yet)</h4>

    State:
    <select id="issue_status">
    <option value="" selected="selected">---------------</option>
    <option value="new">new</option>
    <option value="open">open</option>
    <option value="resolved">resolved</option>
    <option value="hold">hold</option>
    <option value="duplicated">duplicated</option>
    </select>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

    Severity:
    <select id="issue_severity">
    <option value="" selected="selected">---------------</option>
    <option value="critical">critical</option>
    <option value="severe">severe</option>
    <option value="normal">normal</option>
    <option value="trivial">trivial</option>
    </select>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

    Responsible:
    <select id="issue_assigned_to">
    <option value="" selected="selected">------------------</option>
    [% FOREACH p IN curators %]
      <option value="[% p.id %]">[% username(p) %]</option>
    [% END %]
    </select>
  </p>
 -->

  <table border="0" cellspacing="0" width="100%" class="issue-table">
    <tr align=left>
      <th>#</th>
      <th>Title</th>
      <th>Visibility</th>
      <th>State</th>
      <th>Severity</th>
      [% UNLESS (issue_type == 'page') %]<th>Page</th>[% END %]
      <th>Date</th> 
      <th>Reported by</th>
      <th>Responsible</th>
      [% IF c.check_user_roles('admin') %]
        <th><button class="issue-delete" onClick="WB.issue.isDelete($jq(this));return false;" rel="[% c.uri_for('/rest','feed','issue').path %]">Delete</button></th>
      [% END %]
    </tr>
    [% even = 1 %]
    [% FOREACH IS IN issues %]

      [% IF IS.is_private; 
         UNLESS (c.check_any_user_role('admin', 'curator') || (c.user.user_id == IS.reporter.user_id)); NEXT ; END;
      END;
      %]


      [% url = c.uri_for(c.controller('Tools').action_for('issue'),IS.id).path %]
      <tr 
        [% IF (even == 1); 
	     myclass='r0';
	     even=0;
	   ELSE;
	      myclass='r1';
	      even=1;
	   END;	   
        %]
	class="[% myclass %] [% IS.severity %] [% IS.state %]">

        <td><a href="[% url %]">[% IS.id %]</a></td>
        <td ><a href="[% c.uri_for(c.controller('Tools').action_for('issue'),IS.id).path %]">[% IS.title %]:</a> <i>[% txt = IS.content.chunk(30); txt.0; IF txt.1; '...'; END; %]</i></td> 
        <td>[% IF IS.is_private ; ' <em>private</em>' ; END %]</td>
        <td>[% IS.state %]</td>
        <td>[% IS.severity %]</td>
        [% UNLESS (issue_type == 'page') %]<td>[% linkPage(IS.page) %]</td>[% END %]
        <td>[% time_dir.ago(current_time - IS.timestamp, 1)  %]</td>  
        <td>[% IF IS.reporter_id; linkUser(IS.reporter); END %]</td>
        <td>[% IF IS.responsible_id; linkUser(IS.responsible); END %]</td>
        [% IF c.check_user_roles('admin') %]<td><input type='checkbox' class="issue-deletebox" name="[% IS.id %]" /></td>[% END %]
      </tr>
    [% END %]
  </table>
  [% ELSE %]
   <span id="fade">No issues have been reported.</span>
  [% END %]
[% END %]

[% BLOCK timer %]
  [% IF c.check_user_roles('admin') || c.config.timer %]
    <div class="ui-state-highlight ui-corner-all" style="position:absolute; left:30%; top:0.6em;">
    <span class="ui-icon ui-icon-clock" style="float: left; margin-right: .3em;"></span>
    [% FILTER format('%5f') %][% c.stats.elapsed %][% END %] s [% server_details("") %]
      [% cache %] 
     
    </div>
  [% END %]
[% END %]


[%# The Floating Box on the overview widget %]
[% BLOCK highlight_box %]
    <div class="detail-box ui-corner-all">
<div class="content">
       [% taxonomy %]
       [% content %]
       [% wb_id_field %]
       [% download_field %]
</div>
       <div class="view-all" onClick="WB.openAllWidgets(); return false;">

       view all content

</div>
    </div>
[% END %] 

[% #get page info %]
[% BLOCK page_info %]
  [% path = c.req.path %]
  [% url = c.req.uri.path %]

  [% label = c.req.args.-1 %]
  [% IF (c.action.name == 'index'); label = 'home'; 
    ELSIF c.action.name == 'me'; label = 'my wormbase'; 
    END; %]
  [% is_obj = object.name.data.id.defined %]
  [% IF object.name.data.id; label = object.name.data.label; END; %]
[% END %]

[% MACRO get_star_id(id) BLOCK;
  id.remove('[:/ &\.\[\]\+]');
  END %]

[% MACRO make_star(wbid, href) BLOCK;
  '<div class="star-status-' _ wbid _ ' load-star" href="' _ href _ '"></div>';
  END %]


[%# options:
   print="always" to print the field even if there is no data 
%]

[% BLOCK field_block %]

    <div class="field
    [%# Add a class to disable / hide empty fields %]
    [% TRY; IF (key && !fields.$key.data.defined) || disabled; " disabled "; END; END;%]

        ">
         <div class="field-title">
                  <span title="[% tooltip ? tooltip : fields.$key.description %]">
                     [% IF title ; title _ ': '; END; %]
                   </span>
          </div>

          <div class="field-content">
             [% content %]
          </div>
     </div>
[% END %]

[% BLOCK curator_block %]
     [% # Curator (and sometimes admin) specific content) %]
  [% IF c.check_user_roles('curator') OR c.check_user_roles('admin') %]

    <div class="field field-curator" id="[% title FILTER html %]">
         <div class="field-title">
                  [% IF title ; title _ ': '; END; %]
         </div>

         <div class="field-content">
             [% content %]
         </div>
         <span id="fade" class="desc">curator only field</span>
     </div>
  [% END %]
[% END %]


[%#

    Build a JQuery dataTable.
    Parameters:
        order  : array of columns
        columns: hash ref associating columns to labels
        key    : data key for accessing the stash        
        passed_data : in lieu of passing a key for accessing data,
                      pass in pre-structured data as passed_data;
                      useful in cases when you want to change the processing heuristic.

   Note: build_data_table is no longer wrapped in a field BLOCK. This was too
   restrictive for formatting, for example, in cases where it was
   necessary to include multiple tables in a single field.
%]

[% MACRO build_data_table BLOCK;

      local_data = passed_data ? passed_data : fields.$key.data;

      headers = [];
      FOREACH o IN order; headers.push(columns.$o); END;

      # generate table
      jquery_data_table_html(headers, local_data, "table_${key}_by" _ colorbox, style, table_build, order);   

    END; # END of MACRO
%]

[%# jquery_data_table_html:

     This is Xq's original jquery data implementation with some
     sugar added to make it configurable.
     
     It might be better to build the table directly from the data
     structure instead of formatting it into a html table and then
     styling via javascript.
%]
     
[% MACRO jquery_data_table_html(table_headers, rows,table_name,style,table_build, columns) BLOCK %]
  [% IF rows && rows.size > 0;
       # Set up some suitable defaults
       IF rows.size < 11 || (rows.size < 31 && table_headers.size < 3);
          paginate        = 'false';
          pagination_type = 'false';
      	  length          = 'false';
      	  lengthMenu      = 'false';
          filter          = 'false';
          info            = 'false';
       ELSIF rows.size < 31;
          paginate        = 'false';
          pagination_type = 'false';
      	  length          = 'false';
      	  lengthMenu      = 'false';
      	  filter          = 'true';
          info            = 'false';
       ELSE;
          paginate        = 'true';
          pagination_type = 'full_numbers';
      	  length          = 'true';
          lengthMenu      = '[[50, 100, 150, -1], [50, 100, 200, "All"]]';
          filter          = 'true';
      	  info            = 'true'; 
      END;

     UNLESS table_build;

   %]

    <table cellpadding="0" cellspacing="0" border="0" class="display" id="[% table_name %]">
    <thead>
        <tr>
            [% FOREACH header IN table_headers %]  
            <th>[% header %]</th>
            [% END %]
        </tr>
    </thead>
    <tbody>
        [%
          FOREACH row IN rows;
            '<tr>';
	    IF ref(row) == 'HASH';
		FOREACH col IN columns;
		    cell = row.$col;
            scell = "$cell";
		    IF scell.match('^http');
			cell='<a href="' _ cell _ '">Lab link</a>';
		    END;
		    '<td>';
		    cell_content(cell);
		    '</td>';
		END;
	    ELSE;
		FOREACH cell IN row;
		    '<td>';
		    cell_content(cell);
		    '</td>';
		END;
	    END;
            '</tr>';
          END;
             %]
    </tbody>
  </table>
    [% END %]
    <script type="text/javascript" >
        WB.getPlugin("dataTables", function(){
          $jq('#[% table_name %]').dataTable({
            "bPaginate"        : [% paginate %],
            "bLengthChange"    : [% length   %],
            "sPaginationType"  : "[% pagination_type %]",
            "bFilter"          : [% filter %],
            "bInfo"            : [% info %],
            [% style %]
          });
        });
    </script>
   [% END %]

[% END %]

[% MACRO interaction_cell(cell) BLOCK;
    '<table id="interaction_cell_' _ loop.index _ '">';
    IF cell.interaction.Effector || cell.interaction.Effected;
      '<tr>';
	  '<td>' _ tags2link(cell.interaction.Effector) _ '</td>';
	  '<td style="font-size:25px">';
	  IF cell.interaction.Effector.size > 1; '}'; END;
	  '&rarr;</td>';
	  '<td>' _ tags2link(cell.interaction.Effected) _ '</td>';
      '</tr>';
    END;
    IF cell.interaction.Non_directional;
      '<tr>';
	  '<td colspan="3">';
	  FOREACH val IN cell.interaction.Non_directional;
	      tag2link(val);
	      UNLESS loop.last;
		  ' &mdash; ';
	      END;
	  END;
	  '</td>';
      '</tr>';
    END;
    '</table>';
END; %]

[% MACRO show_genotype(obj) BLOCK;
	genstr = obj.str;
	FOREACH key IN obj.data.keys.sort;
	    lnk = tag2link(obj.data.$key);
	    genstr = genstr.replace(key.replace('\-', '\-'), lnk);
	END;
	genstr;    
END; %]

[% MACRO cell_content(cell) BLOCK;
    IF ref(cell) == 'HASH';
      IF cell.species.defined;
          '<span class="species">' _ cell.genus.chunk(1).0 _ '. ' _ cell.species _ '</span>';
      ELSIF cell.class.defined;
          IF cell.label.defined;
            tag2link(cell);
          ELSE;
            searchlink(cell.class, cell.id, cell.id);
          END;
      ELSIF cell.evidence.defined;
          evidence(cell.evidence,table_name _ index, cell.text, 'details');
      ELSIF cell.interaction.defined;
          interaction_cell(cell);
      ELSIF cell.genotype.defined;
          show_genotype(cell.genotype);
      ELSE;

      # assumes that hash passed to cell should be output as the key followed by its value
      # e.g. evidence column of phenotypes widget of gene unc-26 contains alleles, xgenes, and rnai lists in one cell
      FOREACH key IN cell.keys.sort;
        "$key";
        cell_content(cell.$key);
      END;
      END;
	ELSIF ref(cell) == 'ARRAY';
	  IF cell.size > 10;
	      WRAPPER toggle title=cell.size _ ' Results';
            FOREACH item IN cell;
              cell_content(item);
              IF !item.evidence.defined && !loop.last;
                  '<br />';
              END;
            END;
	      END;
	  ELSE;
        FOREACH item IN cell;
          cell_content(item);
          IF !item.evidence.defined && !loop.last;
              '<br />';
          END;
        END;
	  END;
	ELSE;
	   cell;
	END;
  END;
%]

[% MACRO empty_widget_check BLOCK;
  not_empty;
  FOREACH field IN fields.keys;
    IF fields.$field.data.defined;
      not_empty = 1;
      LAST;
    END;
  END; %]
  [% UNLESS not_empty %]
    <span class="caveat-emptor">No [% (c.config.sections.species.$class.widgets.$widget.title || c.config.sections.resources.$class.widgets.$widget.title) FILTER lower %] data for [% object.name.data.label %]</span>
  [% END %]
[% END %]


[% BLOCK status_bar %]
<div style="float:right;padding:1em;"> | 
<button id="my-cart"></button> <a href="/bench">([% c.user_session.bench.register.size %])</a>
</div>
[% END %]


[% BLOCK widget_sortable_block %]
 
   <!-- start [% id %] widget -->
          <div id="widget-[% type %]" class="widget-container ui-corner-all">
                <div class="ui-corner-top widget-header">
                    <div class="module-close ui-icon ui-icon-large ui-icon-close" wname="[% id %]" title="close"></div>
[% IF 0 %]                     <div class="module-max ui-icon ui-icon-extlink" wname="[% id %]" title="pop out"></div>
[% END %]              
                    <h3><div class="module-min ui-icon-large ui-icon-triangle-1-s" title="minimize" wname="[% id %]"></div><span class="widget-title">[% title %]</span>
        [% IF (type == 'me') %]<span wname="[% id %]" class="reload ui-icon ui-icon-arrowrefresh-1-s" title="reload"></span>[% END %]
                        <span class="ui-icon ui-icon-arrow-4 hide ui-helper-hidden" title="move"></span>
                    </h3>
                </div>

                <div id="[%- id -%]-content" class="content">
                [% content %]
                </div>
         
                <div id="widget-footer" class="ui-helper-hidden">
[% UNLESS type.match('(tool)|(me)') %]
                    <a   onClick='$jq(this).toggleClass("ui-state-highlight");' class="button feed ui-corner-all"  rel="[% c.uri_for('/rest','feed','download',class,this_object_id,w.id,this_object_label).path %]" tip="download"><span class="ui-icon ui-icon-arrowthickstop-1-s ui-button"></span></a>
[% END %] 
[% IF id.match('(static-widget)') && (id != 'static-widget--1')  %]
    [% IF c.check_any_user_role("admin", "curator", "editor") %]
                    <a  tip="edit" id="edit-button"  onClick='WB.StaticWidgets.edit("[% id %]");' class="button ui-corner-all"><span class="ui-icon ui-icon-pencil ui-button"></span></a>
    [% END %]
                    <a  tip="view history" id="history-button" onClick='WB.StaticWidgets.history("[% id %]");' class="button ui-corner-all"><span class="ui-icon ui-icon-clock ui-button"></span></a>
[% END %]
                    

                </div>
        <div id="widget-feed"></div>  

      </div> 
   <!-- end [% id %] widget -->

[% END %]


[%#
 #####################################################
 #
 #  Server Details: the server that generated the 
 #  block of code. Mostly useful for debugging. 
 #  
 ####################################################
%]
[% MACRO server_details(title) PERL %]
      my $host = `hostname`;
      chomp $host;
#     print "\n\n<!-- [% title %] generated by: $host -->\n\n\n\n\n";
      print "Generated by: $host";
[% END %]





[%#
####################################################
#
#  GA
#
####################################################
%]
[% BLOCK google_analytics %]
   <!-- GA -->



  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-16257183-1']);
  _gaq.push(['_setDomainName', '.wormbase.org']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();


[% END %]

[%#
 #####################################################
 #
 #  ShareThis
 #
 ####################################################
%]
[% BLOCK share_this %]
   <!-- ShareThis. Or not. -->

   <script type="text/javascript"
   src="http://w.sharethis.com/widget/?tabs=web%2Cpost%2Cemail&amp;charset=utf-8&amp;services=reddit%2Cdigg%2Cfacebook%2Cmyspace%2Cdelicious%2Cstumbleupon%2Ctechnorati%2Cgoogle_bmarks%2Cyahoo_bmarks%2Cslashdot&amp;style=default&amp;publisher=7ab86fe8-5972-4c0c-b8d5-e8a0240bc09d&amp;popup=true">
   </script>
[% END %]



[%
 ####################################################
 #
 #  COMMENTS
 #
 ####################################################
%]


[% MACRO other_names BLOCK; 
      WRAPPER $field_block title="Other names" key="other_names";;
          fields.other_names.data.join(', ');
      END;
END;
%]

[% MACRO best_blastp_matches BLOCK;
   matches = c.stash.fields.best_blastp_matches.data;
   IF matches.hits;
   WRAPPER $field_block title="Best BLASTP matches" key="best_blastp_matches";
    
      build_data_table(order=['evalue','taxonomy','hit','description','percent'],
                       columns={ taxonomy => 'Species',
                                 hit      => 'Hit',
                                 description => 'Description',
                                 evalue   => 'BLAST e-value',
                                 percent  => '% Length'
                                },
                       key='best_blastp_matches',
                       passed_data=matches.hits,
                       style = '"aoColumns": [ null,null,null,{ "sType": "numeric" },null]');
           '<div id="blast_details">';
    WRAPPER toggle title="View full BLASTP List" lazy=1 href=c.uri_for('/rest','field','protein',"$matches.biggest",'blast_details').path id="blast_details_toggle";
    END;
         '</div>';
    END;
  END;
   



END;
%]



[% MACRO expression_patterns BLOCK ;

   WRAPPER $field_block title="Patterns" key="expression_patterns";

       build_data_table(order=['expression_pattern','description','author'],
                      columns={ expression_pattern => 'Pattern',
                        description        => 'Description',
                    author             => 'Author',
                             },
                    key='expression_patterns');
    END;

   END;
%]


[% MACRO central_dogma BLOCK %]
  
  NOT DONE!
  
   <table border="1">
      <tr><td colspan="4">Central Dogma</td></tr>

      <tr>
         <td rowspan="[% fields.central_dogma.data.gene_models.size || 0 + 1 %]">
              [% tag2link(fields.central_dogma.data.gene) %]
         </td>
         <td>Transcript</td><td>Exons</td><td>Protein</td>
      </tr>

     [% FOREACH gene_model IN fields.central_dogma.data.gene_models %]
      <tr>
     <td>
          [% tag2link(gene_model.cds) %]
     </td>

         <td>
          <pre>
          [% FOREACH exon IN gene_model.exons;
                   'exon' _ loop.count _ ': ' _ exon.start _ '..' _ exon.stop  _ '<br />';
               END;
           %]
           </pre>
         </td>
     
     <td>
          [% tag2link(gene_model.protein) %]
     </td>
      </tr>
     [% END %]

          </td>
      </tr>
</table>



       <div class="inline-columns">
          [% IF fields.central_dogma.data.gene %]
           <div>
              <b>Gene</b><br />
              [%# FOREACH item IN fields.central_dogma.data.genes %]
                 [% tag2link(gene) %]<br />
              [%# END %]
           </div>
      [% END %]

          [% IF fields.central_dogma.data.transcripts.size > 0 %]
            <div>
               <span class="rarrow"></span>
            </div>  
            <div>
                <b>Transcripts</b><br />
                 [% FOREACH item IN fields.central_dogma.data.transcripts %]
                   [% tag2link(item) %]<br />
                 [% END %] 
           </div>
         [% END %]

          [% IF fields.central_dogma.data.cds.size > 0 %]
            <div>
               <span class="rarrow"></span>
            </div>  
            <div>
                <b>CDS</b><br />
                 [% FOREACH item IN fields.central_dogma.data.cds %]
                   [% tag2link(item) %]<br />
                 [% END %] 
           </div>
         [% END %]

     </div>

[% END %]


[% MACRO laboratory BLOCK ;
     # The Laboratory field
     # Expects the stash to contain the "laboratory" key.
     WRAPPER $field_block title="$title"||'Laboratory' key="laboratory";
         tag2link(fields.laboratory.data.0.laboratory);
 
         # Include the lab representative, if one exists         
         IF fields.laboratory.data.0.representative;
              "<br /> (" ; 
              tag2link(fields.laboratory.data.0.representative); 
              ")" ; 
         END;
     END;
  END;
%]

[%# 

    Shared phenotypes and phenotypes_not_observed macros. These macros
    could conceivably be folded into shared/widgets/phenotypes.tt2, although
    there are some specific phenotype.tt2 widgets that have some additional
    fields.
%]

[% MACRO phenotypes BLOCK ;

   WRAPPER $field_block title="Phenotypes" key="phenotypes";

       build_data_table(order=['phenotype','evidence'],
                        columns={ 
                        phenotype    => 'Phenotype',
                evidence  => 'Evidence'
                    },
                    key='phenotypes');
    END;
END;
%]

[% MACRO phenotypes_not_observed BLOCK ;

   WRAPPER $field_block title="Phenotypes NOT Observed" key="phenotypes_not_observed";

       build_data_table(order=['phenotype','evidence'],
                        columns={ 
                        phenotype    => 'Phenotype',
                evidence  => 'Evidence'
                    },
                    key='phenotypes_not_observed');
      END;            
   
 END;
%]


[% MACRO remarks BLOCK;
   # Expects the remarks key to be defined in the data stash
   # Presents field in a toggle by default; pass "no_toggle=1" to conceal.

   contents = '';
   IF fields.remarks.data.0.text.defined;
      FOREACH obj IN fields.remarks.data;
        contents = contents _ evidence(obj.evidence, '', obj.text);
      END;
   ELSE;
      contents = contents _ markup(fields.remarks.data.join('<br />'),0);
   END;

   IF no_toggle == 1 && contents;  
       #WRAPPER $field_block title="Remarks" key="remarks";
        '<h4>Remarks:</h4>';
          contents;
       #END;
   ELSE;
      WRAPPER $field_block title="" key="remarks";
        WRAPPER toggle title="Curatorial remarks";
              contents;
        END;
      END;
   END;
END;
%]

[% MACRO summary BLOCK;
    # Currently only includes Summary but could encompass other tags
    WRAPPER $field_block title="Summary" key="summary";
            fields.summary.data;
    END;
END;
%]

[% MACRO status BLOCK; 
      WRAPPER $field_block title="Status" key="status";
           fields.status.data || 'Live';
      END;
END;
%]

[% MACRO taxonomy BLOCK; 
   # Don't display unless we have a genus and species
   IF fields.taxonomy.data.genus;
      WRAPPER $field_block title="Species" key="taxonomy";
          '<span class="species">';
          fields.taxonomy.data.genus _ ' ' _ fields.taxonomy.data.species;
          '</span>';
      END;
   END;
END;
%]


[% MACRO error BLOCK; %]
  [% IF c.stash.error %]
  <br />
  <div class="ui-state-error ui-corner-all description">
    <p>
    <span class="ui-state-error-text">[% c.stash.error %]</span>
    </p>
  </div>
  [% END %]
[% END;
%]


[% MACRO wb_id_field BLOCK; 
   WRAPPER $field_block title="WormBase ID";
          fields.name.data.id;
   END;
END;
%]

[% MACRO download_field BLOCK;
   class = (ACE2WB_MAP.$class || class) FILTER lower;
   IF downloadable(class);
   WRAPPER $field_block title="Download";
   '<a href="' _ c.uri_for('/rest/widget', class, fields.name.data.id, 'sequences').path _ '?colorbox=1" class="button ui-corner-all slink" data-class="protein"><span class="ui-icon ui-icon-arrowthickstop-1-s ui-button"></span></a>';
   END;
  END;
END;
%]

[% MACRO generate_file_download(filename, content, cname) BLOCK;
  '<div class="button ui-corner-all generate-file-download ' _ cname _ '"><span class="ui-icon ui-icon-arrowthickstop-1-s"></span><span>download</span>'
    _ '<div id="filename" class="ui-helper-hidden">' _ filename _ '</div>'
    _ '<div id="content" class="ui-helper-hidden">' _ content  _ '</div>'
_ '</div>';
END;
%]

[% MACRO format_sequence(seq, header) BLOCK;
    format_seq = header ? ">$header\n" : "";
    FOREACH line IN seq.chunk(80);
      format_seq = format_seq _ line;
      UNLESS loop.last;
        format_seq = format_seq _ "\n";
      END;  
    END;
    format_seq;
END;
%]

[% MACRO sequence(field_key, field_title, open_toggle) BLOCK; 
    UNLESS field_key.defined; field_key = 'sequence'; END;

    IF fields.$field_key.data.defined;
      sequence_list = fields.$field_key.data.sequence.defined ? [fields.$field_key.data] : fields.$field_key.data;
    ELSIF (field_key.sequence.defined || field_key.0.sequence.defined);
      sequence_list = field_key.sequence.defined ? [field_key] : field_key;
      field_key = '';
    END;
    sequences = {};

    FOREACH obj IN sequence_list;
      IF obj.sequence.defined;
        seq = obj.sequence;  
        NEXT IF seq.length == 0;

      
        format_seq = seq.match('\s') ? '>' _ object.name.data.label _ ' ' _ obj.header  _ "\n" _ seq  : format_sequence(seq, obj.header || object.name.data.label);
        title = obj.header || 'sequence';    
        seq_html = format_seq | remove('(\<(/?[^\>]+)\>)');
        title_html = title | remove('(\<(/?[^\>]+)\>)');
        fname = object.name.data.id _ title_html _ '.fasta';
        sequences.$obj.download = generate_file_download(fname, seq_html, "sequence-download");

        sequences.$obj.seq = format_seq | replace('\n', '<br />');
        sequences.$obj.title = 'view ' _ title;
        IF obj.length; sequences.$obj.title = sequences.$obj.title  _ ' (' _ (obj.length) _' ' _ (obj.type ? obj.type : 'bp') _ ')'; END;
      ELSE;
        sequences.$obj.download = obj;
      END;
    END;
    IF sequences.keys.size > 0;
      WRAPPER $field_block title=(field_title.defined ?  field_title : "Sequence") key=field_key;
        FOREACH obj IN sequences.keys;
          '<div class="seq-toggle">';
          sequences.$obj.download;
          IF sequences.$obj.seq;
            WRAPPER toggle title=sequences.$obj.title toggle_class="sequence-container" open=open_toggle;
              sequences.$obj.seq;
            END;
          END;
          '</div>';
        END;
      END;
    ELSE;
      '<div class="caveat-emptor">No sequence data available for download</div>';
    END;
END;
%]


[% MACRO strains BLOCK;
     venn("Carrying " _ tag2link(object.name.data) _ " alone", 
                                         fields.strains.data.carrying_gene_alone,
            "Available from the CGC",    fields.strains.data.available_from_cgc,
            "",                          fields.strains.data.carrying_gene_alone_and_cgc,
            "Other strains",             fields.strains.data.others);

    '<br />';

    rows = [];
    FOREACH type IN fields.strains.data.keys.sort;
      cgc = (( type == 'available_from_cgc') || (type == 'carrying_gene_alone_and_cgc')) ? 1 : 0;
      FOREACH strain IN fields.strains.data.$type;
      rows.push( { strain  = tag2link(strain),
                  genotype        = strain.genotype,
                  cgc        = cgc ? external_link('cgc', 'yes', strain.id) : 'no',
                } );
      END;
    END;

       build_data_table(order=['strain','genotype','cgc'],
                         columns={ strain    => 'Strain',
                              cgc       => 'Available<br /> from CGC?',
                          genotype  => 'Genotype',
                                 },
                         passed_data=rows);
  END;
%]


[%# 
    #######################################################

      Class-specific MACROS, used only by a single class 

    #######################################################
%]

[% # gene_list_by_species: custom dataTable processing for the Gene Class summary %]

[% MACRO gene_list_by_species BLOCK;

   WRAPPER $field_block title="$title";

       # loop through each element in <subroutine>.<return_data_key>.<... to array data> array
       # One table for each species
       # Force C. elegans to the top of the list
       species_list = fields.$key.data.keys.sort;
       species_list.unshift('Caenorhabditis elegans');
       species_list = species_list.unique;

       FOREACH species IN species_list;
            IF fields.$key.data.$species > 0;
                WRAPPER $field_block title="" key="$key";
		  WRAPPER toggle title=species _ '(' _ fields.$key.data.$species.size _ ' members)';
		    IF key == 'current_genes';
		      build_data_table(
			  order=['locus', 'sequence'], 
			  columns={ locus    => 'Locus',
				    sequence => 'Sequence' },
			  passed_data=fields.$key.data.$species, key= key _ loop.index);
		    ELSE;
		      build_data_table(
			  order=['former_name', 'new_name', 'sequence'], 
			  columns={ former_name => 'Former name',
				    new_name    => 'New name',
				    sequence => 'Sequence' },
			  passed_data=fields.$key.data.$species, key= key _ loop.index);
		    END;
		  END; #END of toggle WRAPPER
		END; # END of nested WRAPPER
           END; # END IF species contains data
         END; # END of SPECIES
     END; # END of primary WRAPPER 
  END; # END of MACRO
%]

[%# 
    #######################################################

      Page MACROS, used to construct class pages

    #######################################################
%]


[% MACRO add_static_widgets BLOCK %]

  [% FOREACH widget IN static_widgets %]
    [% widget_name = widget.widget_title %]
    [% w = { id = 'static-widget-' _ widget.widget_id
            title = widget.widget_title
            href =  c.uri_for('/rest','widget','static',widget.widget_id).path
            type = section == 'species' ? class : (section ? section : 'static')
            };
    %]
    [% IF widget.widget_order > 0 %]
      [% widget_order = widget.widget_order %]

      [% # I assign to ws just so that the result doesn't print %]
      [% ws = widgets.splice(widget_order, 0, [w]) %]
    [% ELSE %]
      [% widgets.push(w) %]
    [% END %]
  [% END %]
  [% IF c.check_any_user_role('admin', 'curator') %]
    [% w = { id = 'static-widget-0'
            title = 'Add new widget...'
            href =  c.uri_for('/rest','widget','static','0').path _ '?path=' _ c.req.uri.path  _ '&edit=1'
            type = section == 'species' ? class : (section ? section : 'static')
            };
    %]

      [% widgets.push(w) %]
  [% END %]
[% END %]


[% # Report Page elements; shared for species, resources, and tools %]
[% # Called from species/report.tt2 and resources.report.tt2        %]
[% # Callers should pass an array of widgets and the page title     %]

[% MACRO report_page BLOCK;
  widgets = [];
  widgets.push({ title="Page Content" type="title"});

  SET base = '/rest/widget';

  # Conditionally set up different types of pages.
  IF is_class_index && ((!class || class == 'all') || (species && species != 'all'));
    SET this_object_id    = class; 
    SET this_object_label = species; 
    base = base _ '/index';
    arg1 = species;
    IF species; 
      section_fetch = 'species_list'; 
      IF class == 'all';
        section_fetch = c.config.sections.species_list.$species;
      ELSE;
        section_fetch = c.config.sections.species_list.$species.$class;
      END;
    ELSE;
        section_fetch = c.config.sections.$section;
    END;
  ELSE;
    SET this_object_id    = object.name.data.id || class || 'all';
    SET this_object_label = object.name.data.label || 'all';
    arg1 = class;
    section_fetch = c.config.sections.$section.$class;
  END;

# Debug
#    'section     : ' _ section      _ "<br />";
#    'class       : ' _ class   _ "<br />";
#    'species     : ' _ species   _ "<br />";

  # Get the default (configuration provided) list of widgets.
  widget_list = section_fetch.widgets.keys.sort;

  displayed_widgets = [];
  FOREACH widget_list.grep('^overview$');
    widget_list.unshift('overview');
  END;

  widget_list = widget_list.unique;

  FOREACH widget_name IN widget_list;
    IF widget_name;
    # Fetch the actual widget configuration.
    widget = section_fetch.widgets.$widget_name;

    # What context should this widget be displayed in, and what type of page are we?
    IF is_class_index;
        NEXT IF widget.display == "report";
    ELSE;
        NEXT IF widget.display == "index";
    END;

    displayed_widgets.push(widget_name);

    w = {  id    = widget_name
            title = widget.title
            href  = c.uri_for(base, arg1, is_class_index ? '*' : this_object_id, widget_name).path
            type  = section == 'species' ? class : section
          };

    widgets.push(w);
    END;
  END;
  displayed_widgets = displayed_widgets.grep('^overview$');
  IF displayed_widgets.size > 0; overview = 1; END;

  # is_static refers to pages that don't handle objects (/resources/reagents)
  IF is_class_index && !is_static;
    index_widgets = (c.config.sections.species_list.$species || !species) ? ((species == 'all')||(class == 'all')) ? ['browse', 'basic_search', 'summary'] : ['browse', 'basic_search'] : ['data_unavailable'];


    FOREACH widget_name IN index_widgets;
      t = widget_name FILTER ucfirst;
      widgets.push({ id = widget_name
                title = t.replace('_', ' ')
                href  = c.uri_for('/rest','widget', 'index', species, class, widget_name).path,
                type = section == 'species' ? class : section
            });
    END;
  END;


  add_static_widgets;

  # Add tools.
    tool_list = section_fetch.tools.keys.sort || [];

    # object pages automatically get the tree display
    IF object.name.data.id; tool_list.unshift('tree'); tool_list.unshift('epic'); 
    ELSIF (is_class_index && (class != 'all')); tool_list.unshift('schema'); END;

    IF tool_list.size > 0; 
      widgets.push({ title="Tools" type="title"}); 
    END;
    FOREACH widget_name IN tool_list;
        widget = c.config.sections.tools.$widget_name;
        # What context should this widget be displayed in ?
        IF is_index;
          NEXT IF widget.display == "report";
        ELSE;
          NEXT IF widget.display == "index";
        END;
        
        w = { id = widget_name
              title = widget.title
              href =  c.uri_for('/tools',widget.name, 'run').path _ '?inline=1&class=' _ class _ '&name=' _ this_object_id _ '&sequence=' _ this_object_id,

              type = 'tools'
              };
      
        widgets.push(w);
    END;

  PROCESS "shared/sidebar_structure.tt2" widgets=widgets overview=overview;
%]

[% END; %]






[%# This is an expedient replication of report_page to support the userguide. 
    Instead of specifying in config a list of widgets, we just pass them in %]

[% MACRO userguide_page BLOCK;
  widgets = [];
  widgets.push({ title="Page Content" type="title"});

  path = c.request.path;
  SET base = "/rest/widget/$path";

  # The userguide has an n-tiered hierarchy. eg: /userguide/developer/api
  # to make it easier to organize templates on the filesystem.
  # We need to add a param for the top level category.
  IF category == 'index'; subcategory = 'any'; END;

  FOREACH widget IN widget_list;    
      hash = widget.keys;
      name = hash.0;
      wtitle = widget.$name;    
     
      # No need to append the name for our final path for class documentation; HACK HACK HACK!
      IF path.match("api-rest/class");
              myhref = c.uri_for('/rest','widget',path).path;
      ELSE;
              myhref = c.uri_for('/rest','widget',path,name).path;
      END;
      
      w = { id    = name
            title = wtitle,
            href  = myhref,
            type  = 'resources'
          };

    widgets.push(w);
  END;

  widgets.push({ title="Tools" type="title"}); 

  FOREACH widget_name IN ['comment', 'issue'];
      t = widget_name FILTER ucfirst;
      w = { id = widget_name
            title = t _ 's ' _ '<a class="' _ widget_name _ '-count"></a>'
            href =  c.uri_for('/rest','feed',widget_name,class,this_object_id,'',this_object_label).path _ '?url=' _ c.req.uri.path
            type = 'tools'
          };
      widgets.push(w);
  END;

  PROCESS "shared/sidebar_structure.tt2" widgets=widgets overview=overview;
%]

[% END; %]






[%#
 #####################################################
 #
 #  Debugging
 #
 #    Simple view debugging. Should be passed the name 
 #    of the component since this is localized to the template
 #    (or block). That is, it doesn't work as expected when
 #    used via PROCESS or INCLUDE
 #  
 ####################################################
%]

[% BLOCK generic_debug_info %]
   <h5>General information:</h5>
   <pre>
   Catalyst action : [% c.controller.action_for(this) %]<br />
          template : [% template.name %]
   </pre>
[% END %]